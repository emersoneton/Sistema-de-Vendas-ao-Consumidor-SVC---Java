/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoSoftware;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
//import org.dom4j.Document;


/**
 *
 * @author Emerson
 */
public class formRelatorio extends javax.swing.JFrame {

    private Connection con;
    String Estoque;
    /**
     * Creates new form formRelatorio
     */
    public formRelatorio() {
        initComponents();
        txtDataInicialVendas.setEnabled(false);
        txtDataFinalVendas.setEnabled(false);
        txtCodigoProdutoEstoque.setEnabled(false);
        txtCodigoProdutoEstoqueFinal.setEnabled(false);
        txtDataFinalCompras.setEnabled(false);
        txtDataInicialCompras.setEnabled(false);
        txtProdutoCompras.setEnabled(false);
        txtCliente.setEnabled(false);
        txtProduto.setEnabled(false);
        txtNotaCompras.setEnabled(false);
        txtDocumentoReceitas.setEnabled(false);
        txtDataFinalReceitas.setEnabled(false);
        txtDataInicialReceitas.setEnabled(false);
        txtDocumentoReceitas.setDocument(new SoLetrasMaiusculas());
        carregarImagens();
    }
    
    public void carregarImagens(){
     ImageIcon pesquisar = new ImageIcon("C:/Imagem/11_Lupa.png");
     ImageIcon Limpar = new ImageIcon("C:/Imagem/05_Clear.png");
     ImageIcon pdf = new ImageIcon("C:/Imagem/16_Pdf.png");
     

        btnCancelarVendas.setIcon(Limpar);
        btnBuscarVendas.setIcon(pesquisar);
        btnPdfVendas.setIcon(pdf);
        btnCancelarCompras.setIcon(Limpar);
        btnBuscarCompras.setIcon(pesquisar);
        btnPdfCompras.setIcon(pdf);
        btnCancelarEstoque.setIcon(Limpar);
        btnBuscarEstoque.setIcon(pesquisar);
        btnPdfEstoque.setIcon(pdf);
        btnCancelarReceitas.setIcon(Limpar);
        btnBuscarReceitas.setIcon(pesquisar);
        btnPdfReceitas.setIcon(pdf);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        cmdClienteVendas = new javax.swing.JRadioButton();
        cmdProdutoVendas = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtProduto = new javax.swing.JTextField();
        btnBuscarVendas = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        cmdDataVendas = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        txtDataInicialVendas = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDataFinalVendas = new javax.swing.JFormattedTextField();
        cmdPeriodoVendas = new javax.swing.JRadioButton();
        btnCancelarVendas = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaVendas = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        txtNomeVendas = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEnderecoVendas = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtNumeroVendas = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtTelefoneVendas = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCpfVendas = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        txtCidadeVendas = new javax.swing.JTextField();
        txtEstadoVendas = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtBairroVendas = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtTotalVendas = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtQuantidadeVendas = new javax.swing.JTextField();
        btnPdfVendas = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        txtFornecedorCompras = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        cmdComprasPorDataCompras = new javax.swing.JRadioButton();
        cmdComprasNoPeriodoCompras = new javax.swing.JRadioButton();
        cmdComprasPorProdutoCompras = new javax.swing.JRadioButton();
        cmdNotaCompras = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        txtDataInicialCompras = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        txtDataFinalCompras = new javax.swing.JFormattedTextField();
        jLabel21 = new javax.swing.JLabel();
        txtProdutoCompras = new javax.swing.JTextField();
        btnBuscarCompras = new javax.swing.JButton();
        btnCancelarCompras = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        txtNotaCompras = new javax.swing.JTextField();
        btnPdfCompras = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TabelaItemCompras = new javax.swing.JTable();
        jLabel30 = new javax.swing.JLabel();
        txtTotalCompras = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtQuantidadeCompras = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        TabelaNotaCompras = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        TabelaFornecedorCompras = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        cmdTotalEstoque = new javax.swing.JRadioButton();
        cmdPeriodoEstoque = new javax.swing.JRadioButton();
        cmdProdutoEstoque = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        txtCodigoProdutoEstoque = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtCodigoProdutoEstoqueFinal = new javax.swing.JTextField();
        btnBuscarEstoque = new javax.swing.JButton();
        btnCancelarEstoque = new javax.swing.JButton();
        btnPdfEstoque = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabelaEstoque = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        cmdDocumentoReceitas = new javax.swing.JRadioButton();
        cmdGeralReceitas = new javax.swing.JRadioButton();
        jPanel23 = new javax.swing.JPanel();
        cmdDataReceitas = new javax.swing.JRadioButton();
        jLabel23 = new javax.swing.JLabel();
        txtDataInicialReceitas = new javax.swing.JFormattedTextField();
        jLabel24 = new javax.swing.JLabel();
        txtDataFinalReceitas = new javax.swing.JFormattedTextField();
        cmdPeriodoReceitas = new javax.swing.JRadioButton();
        btnBuscarReceitas = new javax.swing.JButton();
        btnCancelarReceitas = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        txtDocumentoReceitas = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TabelaReceitas = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        txtTotalReceitas = new javax.swing.JLabel();
        btnPdfReceitas = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Relat√≥rios de Vendas");

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Descri√ß√µes"));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)), "Pesquisa por"));

        cmdClienteVendas.setText("Cliente");
        cmdClienteVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdClienteVendasMouseClicked(evt);
            }
        });
        cmdClienteVendas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdClienteVendasKeyPressed(evt);
            }
        });

        cmdProdutoVendas.setText("Produto");
        cmdProdutoVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdProdutoVendasMouseClicked(evt);
            }
        });
        cmdProdutoVendas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdProdutoVendasKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdClienteVendas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(cmdProdutoVendas)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdClienteVendas)
                    .addComponent(cmdProdutoVendas))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel2.setText("C√≥digo Cliente");

        txtCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtClienteKeyPressed(evt);
            }
        });

        jLabel3.setText("C√≥digo Produto");

        txtProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProdutoKeyPressed(evt);
            }
        });

        btnBuscarVendas.setText("Buscar");
        btnBuscarVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVendasActionPerformed(evt);
            }
        });
        btnBuscarVendas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBuscarVendasKeyPressed(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmdDataVendas.setText("Data");
        cmdDataVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdDataVendasMouseClicked(evt);
            }
        });

        jLabel4.setText("Periodo Inicial");

        try {
            txtDataInicialVendas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataInicialVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDataInicialVendasMouseClicked(evt);
            }
        });
        txtDataInicialVendas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataInicialVendasKeyPressed(evt);
            }
        });

        jLabel5.setText("Periodo Final");

        try {
            txtDataFinalVendas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        cmdPeriodoVendas.setText("Per√≠odo");
        cmdPeriodoVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdPeriodoVendasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdDataVendas)
                .addGap(26, 26, 26)
                .addComponent(cmdPeriodoVendas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addComponent(txtDataInicialVendas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtDataFinalVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdDataVendas)
                    .addComponent(cmdPeriodoVendas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataFinalVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataInicialVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnCancelarVendas.setText("Cancelar");
        btnCancelarVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVendasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCliente, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtProduto)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCancelarVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscarVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnBuscarVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(btnCancelarVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 83, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Notas"));

        TabelaVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nota", "C√≥digo", "Descri√ß√£o", "Qtd", "Valor", "Data", "Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TabelaVendas);
        if (TabelaVendas.getColumnModel().getColumnCount() > 0) {
            TabelaVendas.getColumnModel().getColumn(0).setMinWidth(50);
            TabelaVendas.getColumnModel().getColumn(0).setMaxWidth(50);
            TabelaVendas.getColumnModel().getColumn(1).setMinWidth(50);
            TabelaVendas.getColumnModel().getColumn(1).setMaxWidth(50);
            TabelaVendas.getColumnModel().getColumn(3).setMinWidth(40);
            TabelaVendas.getColumnModel().getColumn(3).setMaxWidth(40);
            TabelaVendas.getColumnModel().getColumn(4).setMinWidth(50);
            TabelaVendas.getColumnModel().getColumn(4).setMaxWidth(50);
            TabelaVendas.getColumnModel().getColumn(5).setMinWidth(100);
            TabelaVendas.getColumnModel().getColumn(5).setMaxWidth(100);
            TabelaVendas.getColumnModel().getColumn(6).setMinWidth(50);
            TabelaVendas.getColumnModel().getColumn(6).setMaxWidth(50);
        }

        jLabel6.setText("Nome");

        txtNomeVendas.setEditable(false);

        jLabel7.setText("Endere√ßo");

        txtEnderecoVendas.setEditable(false);

        jLabel10.setText("Numero");

        txtNumeroVendas.setEditable(false);

        jLabel11.setText("Telefone");

        txtTelefoneVendas.setEditable(false);

        jLabel12.setText("CPF");

        txtCpfVendas.setEditable(false);
        try {
            txtCpfVendas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel13.setText("Cidade");

        txtCidadeVendas.setEditable(false);

        txtEstadoVendas.setEditable(false);

        jLabel14.setText("UF");

        jLabel15.setText("Bairro");

        txtBairroVendas.setEditable(false);

        jLabel16.setText("Total Geral");

        txtTotalVendas.setEditable(false);

        jLabel17.setText("Quantidade Geral");

        txtQuantidadeVendas.setEditable(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(txtTelefoneVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel12)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtCpfVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtEnderecoVendas))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCidadeVendas)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtEstadoVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNumeroVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtBairroVendas))))
                            .addComponent(txtNomeVendas)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuantidadeVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNomeVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtEnderecoVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtNumeroVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(txtBairroVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtTelefoneVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(txtCpfVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtCidadeVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstadoVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtTotalVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txtQuantidadeVendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnPdfVendas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPdfVendas.setForeground(new java.awt.Color(255, 0, 0));
        btnPdfVendas.setText("PDF");
        btnPdfVendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfVendasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPdfVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPdfVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Vendas", jPanel1);

        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Descri√ß√µes"));

        jLabel18.setText("Fornecedor");

        jPanel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cmdComprasPorDataCompras.setText("Compras por Data");
        cmdComprasPorDataCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdComprasPorDataComprasMouseClicked(evt);
            }
        });
        cmdComprasPorDataCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdComprasPorDataComprasActionPerformed(evt);
            }
        });

        cmdComprasNoPeriodoCompras.setText("Compras no Per√≠odo");
        cmdComprasNoPeriodoCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdComprasNoPeriodoComprasMouseClicked(evt);
            }
        });

        cmdComprasPorProdutoCompras.setText("Compras por Produto");
        cmdComprasPorProdutoCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdComprasPorProdutoComprasMouseClicked(evt);
            }
        });

        cmdNotaCompras.setText("Compras por Nota");
        cmdNotaCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdNotaComprasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdComprasPorDataCompras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdComprasNoPeriodoCompras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdComprasPorProdutoCompras)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdNotaCompras)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdComprasPorDataCompras)
                    .addComponent(cmdComprasNoPeriodoCompras)
                    .addComponent(cmdComprasPorProdutoCompras)
                    .addComponent(cmdNotaCompras))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Compras no Per√≠odo"));

        jLabel19.setText("Data");

        try {
            txtDataInicialCompras.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataInicialCompras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataInicialComprasKeyPressed(evt);
            }
        });

        jLabel20.setText("Data Final");

        try {
            txtDataFinalCompras.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(txtDataInicialCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDataFinalCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataInicialCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataFinalCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel21.setText("Produto");

        btnBuscarCompras.setText("Buscar");
        btnBuscarCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarComprasActionPerformed(evt);
            }
        });

        btnCancelarCompras.setText("Cancelar");
        btnCancelarCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarComprasActionPerformed(evt);
            }
        });

        jLabel22.setText("Nota");

        btnPdfCompras.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPdfCompras.setForeground(new java.awt.Color(255, 0, 0));
        btnPdfCompras.setText("PDF");
        btnPdfCompras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfComprasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel18)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNotaCompras, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(txtProdutoCompras)
                    .addComponent(txtFornecedorCompras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBuscarCompras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancelarCompras, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                        .addGap(19, 19, 19)
                        .addComponent(btnPdfCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(txtFornecedorCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(txtProdutoCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(txtNotaCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(btnBuscarCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCancelarCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPdfCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Notas"));

        TabelaItemCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nota", "C√≥digo", "Descri√ß√£o", "Qtd"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TabelaItemCompras);
        if (TabelaItemCompras.getColumnModel().getColumnCount() > 0) {
            TabelaItemCompras.getColumnModel().getColumn(0).setMinWidth(50);
            TabelaItemCompras.getColumnModel().getColumn(0).setMaxWidth(50);
            TabelaItemCompras.getColumnModel().getColumn(1).setMinWidth(50);
            TabelaItemCompras.getColumnModel().getColumn(1).setMaxWidth(50);
            TabelaItemCompras.getColumnModel().getColumn(3).setMinWidth(40);
            TabelaItemCompras.getColumnModel().getColumn(3).setMaxWidth(40);
        }

        jLabel30.setText("Total Geral");

        txtTotalCompras.setEditable(false);

        jLabel31.setText("Quantidade Geral");

        txtQuantidadeCompras.setEditable(false);

        TabelaNotaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nota", "Fornec", "Data", "Valor", "Desconto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TabelaNotaCompras);
        if (TabelaNotaCompras.getColumnModel().getColumnCount() > 0) {
            TabelaNotaCompras.getColumnModel().getColumn(0).setMinWidth(50);
            TabelaNotaCompras.getColumnModel().getColumn(0).setMaxWidth(50);
            TabelaNotaCompras.getColumnModel().getColumn(1).setMinWidth(50);
            TabelaNotaCompras.getColumnModel().getColumn(1).setMaxWidth(50);
            TabelaNotaCompras.getColumnModel().getColumn(2).setMinWidth(100);
            TabelaNotaCompras.getColumnModel().getColumn(2).setMaxWidth(100);
            TabelaNotaCompras.getColumnModel().getColumn(3).setMinWidth(80);
            TabelaNotaCompras.getColumnModel().getColumn(3).setMaxWidth(80);
            TabelaNotaCompras.getColumnModel().getColumn(4).setMinWidth(80);
            TabelaNotaCompras.getColumnModel().getColumn(4).setMaxWidth(80);
        }

        TabelaFornecedorCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Nome", "Endere√ßo", "Num", "Cnpj", "Telefone"
            }
        ));
        jScrollPane7.setViewportView(TabelaFornecedorCompras);
        if (TabelaFornecedorCompras.getColumnModel().getColumnCount() > 0) {
            TabelaFornecedorCompras.getColumnModel().getColumn(0).setMinWidth(40);
            TabelaFornecedorCompras.getColumnModel().getColumn(0).setMaxWidth(40);
            TabelaFornecedorCompras.getColumnModel().getColumn(2).setMinWidth(180);
            TabelaFornecedorCompras.getColumnModel().getColumn(2).setMaxWidth(180);
            TabelaFornecedorCompras.getColumnModel().getColumn(3).setMinWidth(50);
            TabelaFornecedorCompras.getColumnModel().getColumn(3).setMaxWidth(50);
            TabelaFornecedorCompras.getColumnModel().getColumn(4).setMinWidth(110);
            TabelaFornecedorCompras.getColumnModel().getColumn(4).setMaxWidth(110);
            TabelaFornecedorCompras.getColumnModel().getColumn(5).setMinWidth(80);
            TabelaFornecedorCompras.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addComponent(jScrollPane7)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotalCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuantidadeCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(txtTotalCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(txtQuantidadeCompras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Compras", jPanel2);

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Op√ß√µes"));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Ordenado por"));

        cmdTotalEstoque.setText("Total");
        cmdTotalEstoque.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdTotalEstoqueMouseClicked(evt);
            }
        });
        cmdTotalEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdTotalEstoqueActionPerformed(evt);
            }
        });

        cmdPeriodoEstoque.setText("Por Intervalo");
        cmdPeriodoEstoque.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdPeriodoEstoqueMouseClicked(evt);
            }
        });

        cmdProdutoEstoque.setText("Produto");
        cmdProdutoEstoque.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdProdutoEstoqueMouseClicked(evt);
            }
        });
        cmdProdutoEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdProdutoEstoqueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdTotalEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdProdutoEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdPeriodoEstoque)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cmdTotalEstoque)
                .addComponent(cmdPeriodoEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(cmdProdutoEstoque))
        );

        jLabel8.setText("C√≥digo Produto");

        txtCodigoProdutoEstoque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoProdutoEstoqueKeyPressed(evt);
            }
        });

        jLabel9.setText("C√≥digo Final");

        txtCodigoProdutoEstoqueFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoProdutoEstoqueFinalKeyPressed(evt);
            }
        });

        btnBuscarEstoque.setText("Buscar");
        btnBuscarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarEstoqueActionPerformed(evt);
            }
        });
        btnBuscarEstoque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnBuscarEstoqueKeyPressed(evt);
            }
        });

        btnCancelarEstoque.setText("Cancelar");
        btnCancelarEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarEstoqueActionPerformed(evt);
            }
        });

        btnPdfEstoque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPdfEstoque.setForeground(new java.awt.Color(255, 0, 0));
        btnPdfEstoque.setText("PDF");
        btnPdfEstoque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfEstoqueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCodigoProdutoEstoque, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(txtCodigoProdutoEstoqueFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(btnBuscarEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelarEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPdfEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(4, 4, 4)
                        .addComponent(txtCodigoProdutoEstoqueFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8)
                        .addGroup(jPanel9Layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(txtCodigoProdutoEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(43, 43, 43)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPdfEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        TabelaEstoque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "C√≥digo", "Descri√ß√£o", "Estoque"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TabelaEstoque);
        if (TabelaEstoque.getColumnModel().getColumnCount() > 0) {
            TabelaEstoque.getColumnModel().getColumn(0).setMinWidth(50);
            TabelaEstoque.getColumnModel().getColumn(0).setMaxWidth(50);
            TabelaEstoque.getColumnModel().getColumn(2).setMinWidth(80);
            TabelaEstoque.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Estoque Produto", jPanel6);

        jPanel19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informa√ß√µes"));

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)), "Pesquisa por"));

        cmdDocumentoReceitas.setText("Documento");
        cmdDocumentoReceitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdDocumentoReceitasMouseClicked(evt);
            }
        });
        cmdDocumentoReceitas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdDocumentoReceitasKeyPressed(evt);
            }
        });

        cmdGeralReceitas.setText("Geral");
        cmdGeralReceitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdGeralReceitasMouseClicked(evt);
            }
        });
        cmdGeralReceitas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmdGeralReceitasKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdDocumentoReceitas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                .addComponent(cmdGeralReceitas)
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdDocumentoReceitas)
                    .addComponent(cmdGeralReceitas))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel23.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmdDataReceitas.setText("Data");
        cmdDataReceitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdDataReceitasMouseClicked(evt);
            }
        });

        jLabel23.setText("Periodo Inicial");

        try {
            txtDataInicialReceitas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtDataInicialReceitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDataInicialReceitasMouseClicked(evt);
            }
        });
        txtDataInicialReceitas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataInicialReceitasKeyPressed(evt);
            }
        });

        jLabel24.setText("Periodo Final");

        try {
            txtDataFinalReceitas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        cmdPeriodoReceitas.setText("Per√≠odo");
        cmdPeriodoReceitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmdPeriodoReceitasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdDataReceitas)
                .addGap(26, 26, 26)
                .addComponent(cmdPeriodoReceitas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jLabel23))
                    .addComponent(txtDataInicialReceitas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(txtDataFinalReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdDataReceitas)
                    .addComponent(cmdPeriodoReceitas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataFinalReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDataInicialReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnBuscarReceitas.setText("Buscar");
        btnBuscarReceitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarReceitasActionPerformed(evt);
            }
        });

        btnCancelarReceitas.setText("Cancelar");
        btnCancelarReceitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarReceitasActionPerformed(evt);
            }
        });

        jLabel25.setText("Documento");

        txtDocumentoReceitas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDocumentoReceitasKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDocumentoReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBuscarReceitas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelarReceitas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btnBuscarReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelarReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(txtDocumentoReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel20Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel25)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel20Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Receitas"));

        TabelaReceitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Documento", "Descri√ß√£o", "Total"
            }
        ));
        jScrollPane6.setViewportView(TabelaReceitas);
        if (TabelaReceitas.getColumnModel().getColumnCount() > 0) {
            TabelaReceitas.getColumnModel().getColumn(0).setMinWidth(80);
            TabelaReceitas.getColumnModel().getColumn(0).setMaxWidth(80);
            TabelaReceitas.getColumnModel().getColumn(2).setMinWidth(80);
            TabelaReceitas.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        jLabel26.setText("Total Geral");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotalReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(txtTotalReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        btnPdfReceitas.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPdfReceitas.setForeground(new java.awt.Color(255, 0, 0));
        btnPdfReceitas.setText("PDF");
        btnPdfReceitas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfReceitasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(84, Short.MAX_VALUE))
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPdfReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPdfReceitas, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Receitas", jPanel17);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarEstoqueActionPerformed
        txtCodigoProdutoEstoque.setText("");
        txtCodigoProdutoEstoqueFinal.setText("");
        txtCodigoProdutoEstoque.setEnabled(false);
        txtCodigoProdutoEstoqueFinal.setEnabled(false);
        DefaultTableModel val = (DefaultTableModel) TabelaEstoque.getModel();
        int codigo = TabelaEstoque.getRowCount();
        for(int x=codigo-1 ; x>=0 ; x--){
            val.removeRow(x);
        }
        cmdTotalEstoque.setSelected(false);
        cmdPeriodoEstoque.setSelected(false);
        cmdProdutoEstoque.setSelected(false);
        cmdTotalEstoque.setForeground(Color.BLACK);
        cmdPeriodoEstoque.setForeground(Color.BLACK);
        cmdProdutoEstoque.setForeground(Color.BLACK);

    }//GEN-LAST:event_btnCancelarEstoqueActionPerformed

    private void btnBuscarEstoqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBuscarEstoqueKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            BuscarEstoque();
        }
    }//GEN-LAST:event_btnBuscarEstoqueKeyPressed

    private void btnBuscarEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarEstoqueActionPerformed

        if(cmdTotalEstoque.isSelected()){
            BuscarEstoque();
        }else if(cmdProdutoEstoque.isSelected()){
            BuscarEstoque();
        }else if(cmdPeriodoEstoque.isSelected()){
            BuscarEstoque();
        }else JOptionPane.showMessageDialog(null, "SELECIONE UMA OPERA√á√ÉO DE ORDENA√á√ÉO!");

    }//GEN-LAST:event_btnBuscarEstoqueActionPerformed

    private void txtCodigoProdutoEstoqueFinalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoProdutoEstoqueFinalKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            btnBuscarEstoque.requestFocus();
        }
    }//GEN-LAST:event_txtCodigoProdutoEstoqueFinalKeyPressed

    private void txtCodigoProdutoEstoqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoProdutoEstoqueKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtCodigoProdutoEstoqueFinal.requestFocus();
        }
    }//GEN-LAST:event_txtCodigoProdutoEstoqueKeyPressed

    private void cmdProdutoEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdProdutoEstoqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdProdutoEstoqueActionPerformed

    private void cmdProdutoEstoqueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdProdutoEstoqueMouseClicked
        if(cmdProdutoEstoque.isSelected()){
            cmdTotalEstoque.setSelected(false);
            cmdPeriodoEstoque.setSelected(false);
            cmdTotalEstoque.setForeground(Color.BLACK);
            cmdPeriodoEstoque.setForeground(Color.BLACK);
            cmdProdutoEstoque.setForeground(Color.BLUE);
            txtCodigoProdutoEstoque.setEnabled(true);
            txtCodigoProdutoEstoqueFinal.setEnabled(false);
            txtCodigoProdutoEstoqueFinal.setEnabled(false);
        }else{
            cmdProdutoEstoque.setForeground(Color.black);
            txtCodigoProdutoEstoque.setEnabled(false);
        }
    }//GEN-LAST:event_cmdProdutoEstoqueMouseClicked

    private void cmdPeriodoEstoqueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdPeriodoEstoqueMouseClicked
        if(cmdPeriodoEstoque.isSelected()){
            cmdTotalEstoque.setSelected(false);
            cmdProdutoEstoque.setSelected(false);
            cmdTotalEstoque.setForeground(Color.BLACK);
            cmdProdutoEstoque.setForeground(Color.BLACK);
            cmdPeriodoEstoque.setForeground(Color.BLUE);
            txtCodigoProdutoEstoque.setEnabled(true);
            txtCodigoProdutoEstoqueFinal.setEnabled(true);
        }else{
            cmdPeriodoEstoque.setForeground(Color.black);
            txtCodigoProdutoEstoque.setEnabled(false);
            txtCodigoProdutoEstoqueFinal.setEnabled(false);
        }
    }//GEN-LAST:event_cmdPeriodoEstoqueMouseClicked

    private void cmdTotalEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdTotalEstoqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdTotalEstoqueActionPerformed

    private void cmdTotalEstoqueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdTotalEstoqueMouseClicked
        if(cmdTotalEstoque.isSelected()){
            cmdProdutoEstoque.setSelected(false);
            cmdPeriodoEstoque.setSelected(false);
            cmdProdutoEstoque.setForeground(Color.BLACK);
            cmdPeriodoEstoque.setForeground(Color.BLACK);
            cmdTotalEstoque.setForeground(Color.BLUE);
            txtCodigoProdutoEstoque.setEnabled(false);
            txtCodigoProdutoEstoqueFinal.setEnabled(false);
        }else{
            cmdTotalEstoque.setForeground(Color.black);
        }    
    }//GEN-LAST:event_cmdTotalEstoqueMouseClicked

    private void btnCancelarComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarComprasActionPerformed

        txtDataFinalCompras.setText("");
        txtDataInicialCompras.setText("");
        txtFornecedorCompras.setText("");
        txtProdutoCompras.setText("");
        txtQuantidadeCompras.setText("");
        txtTotalCompras.setText("");
        txtNotaCompras.setText("");
        txtDataFinalCompras.setEnabled(false);
        txtDataInicialCompras.setEnabled(false);
        txtProdutoCompras.setEnabled(false);
        cmdComprasPorDataCompras.setForeground(Color.black);
        cmdComprasNoPeriodoCompras.setForeground(Color.black);
        cmdComprasPorProdutoCompras.setForeground(Color.black);
        cmdComprasPorDataCompras.setSelected(false);
        cmdComprasNoPeriodoCompras.setSelected(false);
        cmdComprasPorProdutoCompras.setSelected(false);
        DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();
        int codigo = TabelaItemCompras.getRowCount();
        for(int x=codigo-1 ; x>=0 ; x--){
            val.removeRow(x);
        }
        DefaultTableModel val1 = (DefaultTableModel) TabelaNotaCompras.getModel();
        int codigo1 = TabelaNotaCompras.getRowCount();
        for(int x=codigo1-1 ; x>=0 ; x--){
            val1.removeRow(x);
        }
        DefaultTableModel val2 = (DefaultTableModel) TabelaFornecedorCompras.getModel();
        int codigo2 = TabelaFornecedorCompras.getRowCount();
        for(int x=codigo2-1 ; x>=0 ; x--){
            val2.removeRow(x);
        }
    }//GEN-LAST:event_btnCancelarComprasActionPerformed

    private void btnBuscarComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarComprasActionPerformed
           if(cmdComprasPorDataCompras.isSelected()){
               BuscaFornecedorPorData();
           }else if(cmdComprasNoPeriodoCompras.isSelected()){
               BuscaFornecedorPorPeriodo();
           }else if(cmdComprasPorProdutoCompras.isSelected()){
               BuscaPorProduto();
           }else if(cmdNotaCompras.isSelected()){
               BuscaPorNota();
           }else BuscaGeralFornecedor();
    }//GEN-LAST:event_btnBuscarComprasActionPerformed

    public void BuscaPorProduto(){
        int retorno = 0;
        String Produto;
         try {
            this.con = database.getConnection();
            if(txtProdutoCompras.getText().length()<=0){ 
                JOptionPane.showMessageDialog(null, "INFORME UM PRODUTO ANTES DE PESQUISAR!");
            }else{
              
                PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0 AND ITMCODPRO = '"+txtProdutoCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    Produto = PRO.descricao;
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                                    DefaultTableModel val1 = (DefaultTableModel) TabelaItemCompras.getModel();
                                    int cont = TabelaItemCompras.getRowCount();
                                    int pesquisa = 1;
                                    for(int x=0 ; x<cont ; x++){
                                        String NumeroNota = TabelaItemCompras.getValueAt(x, 0).toString();
                                        
                                        if(NumeroNota.trim().equals(numeronota)){
                                            pesquisa = 0;
                                        }
  
                                    }
                                    
                                    if(pesquisa == 0) val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                    retorno = 1;
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
 
            }
              if(retorno == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADA NOTA DE ENTRADA PARA O PRODUTO INFORMADO!");
                            } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void BuscaPorNota(){
        int retorno = 0;
         try {
            this.con = database.getConnection();
            if(txtNotaCompras.getText().length()<=0){ 
                JOptionPane.showMessageDialog(null, "INFORME A NOTA ANTES DE PESQUISAR!");
            }else{
              
                PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' AND NFENUM = '"+txtNotaCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' AND NFENUM = '"+txtNotaCompras.getText()+"' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                    retorno = 1;
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
 
            }
              if(retorno == 0) JOptionPane.showMessageDialog(null, "NOTA N√ÉO CONSTA NA BASE DE DADOS!");
                            } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
     public void BuscaGeralFornecedor(){
         try {
            this.con = database.getConnection();
            if(txtFornecedorCompras.getText().length()<=0){ 
                Cliente CLI = new Cliente();
                String CodCLi = txtFornecedorCompras.getText();
                PreparedStatement buscacliente = con.prepareStatement("select DISTINCT ctenfe.nfenomecli,ctenfe.nfecodcli,ccli.cli_endereco,ccli.cli_numero,ccli.cli_telefone1,ccli.cli_cnpj from ctenfe,ccli where ctenfe.nfecodcli = ccli.cli_cod and nfeope = 'NFE'");

                    ResultSet rs2 = buscacliente.executeQuery();

                    while(rs2.next()){
                        String cod = rs2.getString("nfecodcli");
                            CLI.nome = rs2.getString("nfenomecli");
                            CLI.cnpj = rs2.getString("cli_CNPJ");
                            CLI.endereco = rs2.getString("cli_endereco");
                            CLI.numero = rs2.getString("CLI_numero");
                            CLI.telefone = rs2.getString("CLI_telefone1");
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaFornecedorCompras.getModel();

                            val.addRow(new String[]{cod, CLI.nome,CLI.endereco,CLI.numero,CLI.cnpj, CLI.telefone});
                          
                        }
                PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0 order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();

                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
 
            }else {
                Cliente CLI = new Cliente();
                String CodCLi = txtFornecedorCompras.getText();
                PreparedStatement buscacliente = con.prepareStatement("select * from ccli");

                    ResultSet rs2 = buscacliente.executeQuery();

                    while(rs2.next()){
                        String cod = rs2.getString("cli_cod");
                        if(cod.trim().equals(CodCLi)){
                            CLI.nome = rs2.getString("cli_nome");
                            CLI.bairro = rs2.getString("CLI_bairro");
                            CLI.cidade = rs2.getString("CLI_cidade");
                            CLI.cnpj = rs2.getString("cli_CNPJ");
                            CLI.estado = rs2.getString("CLI_estado");
                            CLI.endereco = rs2.getString("cli_endereco");
                            CLI.numero = rs2.getString("CLI_numero");
                            CLI.telefone = rs2.getString("CLI_telefone1");
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaFornecedorCompras.getModel();

                            val.addRow(new String[]{cod, CLI.nome,CLI.endereco,CLI.numero,CLI.cnpj, CLI.telefone});
                          
                            }
                        }
                
                  PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0 and nfecodcli = '"+txtFornecedorCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' and nfecodcli = '"+txtFornecedorCompras.getText()+"'  order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();

                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
 
            }
              
                            } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void BuscaFornecedorPorData(){
        int retorno = 0;
         try {
            this.con = database.getConnection();
            if(txtFornecedorCompras.getText().length()<=0){
    
               PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0 and nfedat = '"+txtDataInicialCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' and nfedat = '"+txtDataInicialCompras.getText()+"' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();

                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                    retorno = 1;
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
            if(retorno == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADO NOTA PARA A DATA INFORMADA!");
            else {
                 Cliente CLI = new Cliente();
                String CodCLi = txtFornecedorCompras.getText();
                PreparedStatement buscacliente = con.prepareStatement("select DISTINCT ctenfe.nfenomecli,ctenfe.nfecodcli,ccli.cli_endereco,ccli.cli_numero,ccli.cli_telefone1,ccli.cli_cnpj,ctenfe.nfedat from ctenfe,ccli where ctenfe.nfecodcli = ccli.cli_cod and nfeope = 'NFE' and nfedat = '"+txtDataInicialCompras.getText()+"'");

                    ResultSet rs2 = buscacliente.executeQuery();

                        while(rs2.next()){
                        
                        String cod = rs2.getString("nfecodcli");

                            CLI.nome = rs2.getString("nfenomecli");
                            CLI.cnpj = rs2.getString("cli_CNPJ");
                            CLI.endereco = rs2.getString("cli_endereco");
                            CLI.numero = rs2.getString("CLI_numero");
                            CLI.telefone = rs2.getString("CLI_telefone1");
                            
                            DefaultTableModel val1 = (DefaultTableModel) TabelaFornecedorCompras.getModel();

                            val1.addRow(new String[]{cod, CLI.nome,CLI.endereco,CLI.numero,CLI.cnpj, CLI.telefone});
                    }
            }                        
                                
            }else if(txtFornecedorCompras.getText().length()>=0){

                      PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0 and nfedat = '"+txtDataInicialCompras.getText()+"' and nfecodcli = '"+txtFornecedorCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' and nfedat = '"+txtDataInicialCompras.getText()+"' and nfecodcli = '"+txtFornecedorCompras.getText()+"' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();

                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                    retorno = 1;
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
            if(retorno == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADO NOTA PARA A DATA INFORMADA!");
            else {
                Cliente CLI = new Cliente();
                String CodCLi = txtFornecedorCompras.getText();
                 PreparedStatement buscacliente = con.prepareStatement("select DISTINCT ctenfe.nfenomecli,ctenfe.nfecodcli,ccli.cli_endereco,ccli.cli_numero,ccli.cli_telefone1,ccli.cli_cnpj,ctenfe.nfedat from ctenfe,ccli where ctenfe.nfecodcli = ccli.cli_cod and nfeope = 'NFE' and nfedat = '"+txtDataInicialCompras.getText()+"'");

                    ResultSet rs2 = buscacliente.executeQuery();

                    while(rs2.next()){
                        String cod = rs2.getString("nfecodcli");
                            CLI.nome = rs2.getString("nfenomecli");
                            CLI.cnpj = rs2.getString("cli_CNPJ");
                            CLI.endereco = rs2.getString("cli_endereco");
                            CLI.numero = rs2.getString("CLI_numero");
                            CLI.telefone = rs2.getString("CLI_telefone1");
                            
                            DefaultTableModel val1 = (DefaultTableModel) TabelaFornecedorCompras.getModel();

                            val1.addRow(new String[]{cod, CLI.nome,CLI.endereco,CLI.numero,CLI.cnpj, CLI.telefone});
                          
                        }
            }
           
            }
                            } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void BuscaFornecedorPorPeriodo(){
        int retorno = 0;
         try {
            this.con = database.getConnection();
            if(txtFornecedorCompras.getText().length()<=0){
                 
               PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0 and nfedat between '"+txtDataInicialCompras.getText()+"' and '"+txtDataFinalCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' and nfedat between '"+txtDataInicialCompras.getText()+"' and '"+txtDataFinalCompras.getText()+"' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();

                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                    retorno = 1;
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
           if(retorno == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADO NOTA NO PERIODO INFORMADO!");
            else {   
               Cliente CLI = new Cliente();
                String CodCLi = txtFornecedorCompras.getText();
                PreparedStatement buscacliente = con.prepareStatement("select DISTINCT ctenfe.nfenomecli,ctenfe.nfecodcli,ccli.cli_endereco,ccli.cli_numero,ccli.cli_telefone1,ccli.cli_cnpj,ctenfe.nfedat from ctenfe,ccli where ctenfe.nfecodcli = ccli.cli_cod and nfeope = 'NFE' and nfedat between '"+txtDataInicialCompras.getText()+"' and '"+txtDataFinalCompras.getText()+"'");

                    ResultSet rs2 = buscacliente.executeQuery();

                    while(rs2.next()){
                        String cod = rs2.getString("nfecodcli");
                            CLI.nome = rs2.getString("nfenomecli");
                            CLI.cnpj = rs2.getString("cli_CNPJ");
                            CLI.endereco = rs2.getString("cli_endereco");
                            CLI.numero = rs2.getString("CLI_numero");
                            CLI.telefone = rs2.getString("CLI_telefone1");
                            
                            
                            DefaultTableModel val1 = (DefaultTableModel) TabelaFornecedorCompras.getModel();
                            
                            int cont = TabelaFornecedorCompras.getRowCount();
                            int y = 0;
                            for(int x = 0; x<cont ;x++){
                                String Codigo = TabelaFornecedorCompras.getValueAt(x, 0).toString();
                                if(cod.trim().equals(Codigo)){
                                    y = 1;
                                }else {
                                    
                                }
                            }

                            if(y == 0) val1.addRow(new String[]{cod, CLI.nome,CLI.endereco,CLI.numero,CLI.cnpj, CLI.telefone});
                          
                        }
           }      
                                
            }else if(txtFornecedorCompras.getText().length()>=0){

                      PreparedStatement buscaitem = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,ctenfe.nfevlrtot,ctenfe.nfevlrdes from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = 'NFE' and nfenum > 0  and nfedat between '"+txtDataInicialCompras.getText()+"' and '"+txtDataFinalCompras.getText()+"' and nfecodcli = '"+txtFornecedorCompras.getText()+"' order by nfenum");

                            ResultSet rs1 = buscaitem.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");

                                    DefaultTableModel val = (DefaultTableModel) TabelaItemCompras.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd}); 
                                }
                         
                        PreparedStatement buscanota = con.prepareStatement("select * from ctenfe where nfeope = 'NFE' and nfedat between '"+txtDataInicialCompras.getText()+"' and '"+txtDataFinalCompras.getText()+"' and nfecodcli = '"+txtFornecedorCompras.getText()+"' order by nfenum");
                            ResultSet rs = buscanota.executeQuery();
                            while(rs.next()){
                                    Produto PRO = new Produto();
                                    String data = rs.getString("nfedat");
                                    String numeronota = rs.getString("NFENUM");
                                    String CodCli = rs.getString("NFECODCLI");
                                    String Valor = rs.getString("nfevlrtot");
                                    String Desconto = rs.getString("nfevlrdes");

                                    DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();

                                    val.addRow(new String[]{numeronota,CodCli,data,Valor,Desconto}); 
                                }
                        
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel();
                            double count=0,Date=0;
                            
                                for (int i=0; i<=TabelaNotaCompras.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 3).toString());
                                    Date+=Double.parseDouble(TabelaNotaCompras.getValueAt(i, 4).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalCompras.setText(ValorTotal);
                                txtQuantidadeCompras.setText(data);
                                
            if(retorno == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADO NOTA NO PERIODO INFORMADO!");
            else {
                 Cliente CLI = new Cliente();
                String CodCLi = txtFornecedorCompras.getText();
                PreparedStatement buscacliente = con.prepareStatement("select DISTINCT ctenfe.nfenomecli,ctenfe.nfecodcli,ccli.cli_endereco,ccli.cli_numero,ccli.cli_telefone1,ccli.cli_cnpj,ctenfe.nfedat from ctenfe,ccli where ctenfe.nfecodcli = ccli.cli_cod and nfeope = 'NFE' and nfedat between '"+txtDataInicialCompras.getText()+"' and '"+txtDataFinalCompras.getText()+"' and nfecodcli = '"+txtFornecedorCompras.getText()+"'");

                    ResultSet rs2 = buscacliente.executeQuery();

                    while(rs2.next()){
                        String cod = rs2.getString("nfecodcli");
                            CLI.nome = rs2.getString("nfenomecli");
                            CLI.cnpj = rs2.getString("cli_CNPJ");
                            CLI.endereco = rs2.getString("cli_endereco");
                            CLI.numero = rs2.getString("CLI_numero");
                            CLI.telefone = rs2.getString("CLI_telefone1");
                            
                            
                            DefaultTableModel val1 = (DefaultTableModel) TabelaFornecedorCompras.getModel();
                            
                            int cont = TabelaFornecedorCompras.getRowCount();
                            int y = 0;
                            for(int x = 0; x<cont ;x++){
                                String Codigo = TabelaFornecedorCompras.getValueAt(x, 0).toString();
                                if(cod.trim().equals(Codigo)){
                                    y = 1;
                                }else {
                                    
                                }
                            }

                            if(y == 0) val1.addRow(new String[]{cod, CLI.nome,CLI.endereco,CLI.numero,CLI.cnpj, CLI.telefone});
                          
                        }
            }                    
            }
            
                            } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void cmdComprasPorProdutoComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdComprasPorProdutoComprasMouseClicked
        if(cmdComprasPorProdutoCompras.isSelected()){
            cmdComprasPorProdutoCompras.setForeground(Color.blue);
            cmdComprasPorDataCompras.setSelected(false);
            cmdComprasNoPeriodoCompras.setSelected(false);
            cmdNotaCompras.setSelected(false);
            cmdNotaCompras.setSelected(false);
            cmdNotaCompras.setForeground(Color.black);
            cmdNotaCompras.setForeground(Color.black);
            cmdComprasPorDataCompras.setForeground(Color.black);
            cmdComprasNoPeriodoCompras.setForeground(Color.black);
            txtDataFinalCompras.setEnabled(false);
            txtDataInicialCompras.setEnabled(false);
            txtProdutoCompras.setEnabled(true);
            txtFornecedorCompras.setEnabled(false);
            txtNotaCompras.setEnabled(false);
        }else{
            txtFornecedorCompras.setEnabled(true);
            txtProdutoCompras.setEnabled(false);
            cmdComprasPorProdutoCompras.setForeground(Color.black);
        }  
    }//GEN-LAST:event_cmdComprasPorProdutoComprasMouseClicked

    private void cmdComprasNoPeriodoComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdComprasNoPeriodoComprasMouseClicked
        if(cmdComprasNoPeriodoCompras.isSelected()){
            cmdComprasNoPeriodoCompras.setForeground(Color.blue);
            cmdComprasPorDataCompras.setSelected(false);
            cmdComprasPorProdutoCompras.setSelected(false);
            cmdComprasPorDataCompras.setForeground(Color.black);
            cmdComprasPorProdutoCompras.setForeground(Color.black);
            txtDataFinalCompras.setEnabled(true);
            txtDataInicialCompras.setEnabled(true);
            txtProdutoCompras.setEnabled(false);
            txtNotaCompras.setEnabled(false);
            txtFornecedorCompras.setEnabled(true);
        }else{
            txtDataFinalCompras.setEnabled(false);
            txtDataInicialCompras.setEnabled(false);
            cmdComprasNoPeriodoCompras.setForeground(Color.black);
        }  
    }//GEN-LAST:event_cmdComprasNoPeriodoComprasMouseClicked

    private void cmdComprasPorDataComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdComprasPorDataComprasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdComprasPorDataComprasActionPerformed

    private void cmdComprasPorDataComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdComprasPorDataComprasMouseClicked
        if(cmdComprasPorDataCompras.isSelected()){
            cmdComprasPorDataCompras.setForeground(Color.blue);
            cmdComprasNoPeriodoCompras.setSelected(false);
            cmdComprasPorProdutoCompras.setSelected(false);
            cmdNotaCompras.setSelected(false);
            cmdNotaCompras.setForeground(Color.black);
            cmdComprasNoPeriodoCompras.setForeground(Color.black);
            cmdComprasPorProdutoCompras.setForeground(Color.black);
            txtDataFinalCompras.setEnabled(false);
            txtDataInicialCompras.setEnabled(true);
            txtProdutoCompras.setEnabled(false);
            txtNotaCompras.setEnabled(false);
            txtFornecedorCompras.setEnabled(true);
        }else{
            txtDataInicialCompras.setEnabled(false);
            cmdComprasPorDataCompras.setForeground(Color.black);
        }
    }//GEN-LAST:event_cmdComprasPorDataComprasMouseClicked

    private void btnCancelarVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarVendasActionPerformed
        txtBairroVendas.setText("");
        txtProduto.setText("");
        txtCidadeVendas.setText("");
        txtCliente.setText("");
        txtCpfVendas.setText("");
        txtDataFinalVendas.setText("");
        txtDataInicialVendas.setText("");
        txtEnderecoVendas.setText("");
        txtEstadoVendas.setText("");
        txtNomeVendas.setText("");
        txtNumeroVendas.setText("");
        txtTelefoneVendas.setText("");
        cmdProdutoVendas.setSelected(false);
        cmdClienteVendas.setSelected(false);
        cmdDataVendas.setSelected(false);
        cmdPeriodoVendas.setSelected(false);
        cmdClienteVendas.setForeground(Color.black);
        cmdProdutoVendas.setForeground(Color.black);
        cmdDataVendas.setForeground(Color.black);
        cmdPeriodoVendas.setForeground(Color.black);
        txtDataInicialVendas.setEnabled(false);
        txtDataFinalVendas.setEnabled(false);
        txtCliente.setEnabled(true);
        txtProduto.setEnabled(true);
        txtTotalVendas.setText("");
        txtQuantidadeVendas.setText("");
        txtProduto.setEnabled(false);
        txtCliente.setEnabled(false);
        DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
        int codigo = TabelaVendas.getRowCount();
        for(int x=codigo-1 ; x>=0 ; x--){
            val.removeRow(x);
        }
    }//GEN-LAST:event_btnCancelarVendasActionPerformed

    private void cmdPeriodoVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdPeriodoVendasMouseClicked
        if(cmdPeriodoVendas.isSelected()){
            cmdDataVendas.setSelected(false);
            cmdPeriodoVendas.setForeground(Color.BLUE);
            cmdDataVendas.setForeground(Color.black);
            txtDataInicialVendas.setEnabled(true);
            txtDataFinalVendas.setEnabled(true);
        }else{
            txtDataInicialVendas.setEnabled(false);
            txtDataFinalVendas.setEnabled(false);
            cmdPeriodoVendas.setForeground(Color.black);
        }
    }//GEN-LAST:event_cmdPeriodoVendasMouseClicked

    private void txtDataInicialVendasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataInicialVendasKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtDataFinalVendas.requestFocus();
        }
    }//GEN-LAST:event_txtDataInicialVendasKeyPressed

    private void txtDataInicialVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDataInicialVendasMouseClicked

    }//GEN-LAST:event_txtDataInicialVendasMouseClicked

    private void cmdDataVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdDataVendasMouseClicked
        if(cmdDataVendas.isSelected()){
            cmdPeriodoVendas.setSelected(false);
            cmdDataVendas.setForeground(Color.BLUE);
            cmdPeriodoVendas.setForeground(Color.black);
            txtDataInicialVendas.setEnabled(true);
            txtDataFinalVendas.setEnabled(false);
        }else{
            txtDataInicialVendas.setEnabled(false);
            cmdDataVendas.setForeground(Color.black);
        }
    }//GEN-LAST:event_cmdDataVendasMouseClicked

    private void btnBuscarVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVendasActionPerformed
        BuscaVendas();
    }//GEN-LAST:event_btnBuscarVendasActionPerformed

    public void BuscaVendas(){
        if(cmdClienteVendas.isSelected()){
            if(txtCliente.getText().length()<=0){
                JOptionPane.showMessageDialog(null, "INFORME O CLIENTE ANTES DE CONSULTAR!");
            } else{
                if(txtProduto.getText().length()<=0){
                    ConsultaClienteSemProduto();
                } else ConsultaClienteComProduto();
            }
        } else if (cmdProdutoVendas.isSelected()){
            if(txtProduto.getText().length()<=0){
                JOptionPane.showMessageDialog(null, "INSIRA O PRODUTO ANTES DE CONSULTAR!");
            } else{
                ConsultaProduto();
            }
        } else{
            buscageral();
        }
    }
    
    private void txtClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClienteKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            btnBuscarVendas.requestFocus();
        }
    }//GEN-LAST:event_txtClienteKeyPressed

    private void cmdProdutoVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdProdutoVendasMouseClicked
        if(cmdProdutoVendas.isSelected()){
            txtProduto.setEnabled(true);
            cmdClienteVendas.setSelected(false);
            cmdProdutoVendas.setForeground(Color.BLUE);
            cmdClienteVendas.setForeground(Color.black);
            txtCliente.setEnabled(false);
        }else {
            txtProduto.setEnabled(false);
            cmdProdutoVendas.setForeground(Color.black);
        }
    }//GEN-LAST:event_cmdProdutoVendasMouseClicked

    private void cmdClienteVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdClienteVendasMouseClicked
        if(cmdClienteVendas.isSelected()){
            cmdProdutoVendas.setSelected(false);
            cmdClienteVendas.setForeground(Color.BLUE);
            cmdProdutoVendas.setForeground(Color.black);
            txtCliente.setEnabled(true);
        }else{
            txtCliente.setEnabled(false);
            cmdClienteVendas.setForeground(Color.black);
        }
    }//GEN-LAST:event_cmdClienteVendasMouseClicked

    private void cmdNotaComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdNotaComprasMouseClicked
    if(cmdNotaCompras.isSelected()){
            cmdNotaCompras.setForeground(Color.blue);
            cmdComprasPorDataCompras.setSelected(false);
            cmdComprasNoPeriodoCompras.setSelected(false);
            cmdComprasPorProdutoCompras.setSelected(false);
            cmdComprasPorDataCompras.setForeground(Color.black);
            cmdComprasNoPeriodoCompras.setForeground(Color.black);
            cmdComprasPorProdutoCompras.setForeground(Color.black);
            txtDataFinalCompras.setEnabled(false);
            txtDataInicialCompras.setEnabled(false);
            txtProdutoCompras.setEnabled(false);
            txtFornecedorCompras.setEnabled(false);
            txtNotaCompras.setEnabled(true);
        }else{
            txtFornecedorCompras.setEnabled(true);
            txtNotaCompras.setEnabled(false);
            cmdNotaCompras.setForeground(Color.black);
        }         
    }//GEN-LAST:event_cmdNotaComprasMouseClicked

    private void txtDataInicialComprasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataInicialComprasKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtDataFinalCompras.requestFocus();
        } 
    }//GEN-LAST:event_txtDataInicialComprasKeyPressed

    private void txtProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProdutoKeyPressed
          if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(cmdProdutoVendas.isSelected()){
                btnBuscarVendas.requestFocus();
            }
        }
    }//GEN-LAST:event_txtProdutoKeyPressed

    private void btnBuscarVendasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnBuscarVendasKeyPressed
          if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            BuscaVendas();
        }
    }//GEN-LAST:event_btnBuscarVendasKeyPressed

    private void cmdClienteVendasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdClienteVendasKeyPressed
        txtCliente.requestFocus();
    }//GEN-LAST:event_cmdClienteVendasKeyPressed

    private void cmdProdutoVendasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdProdutoVendasKeyPressed
        txtProduto.requestFocus();
    }//GEN-LAST:event_cmdProdutoVendasKeyPressed

    private void btnPdfVendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfVendasActionPerformed
        Document document =new Document();
        
        try {
            PdfWriter.getInstance(document, new FileOutputStream("Vendas.pdf"));
            
            
           document.open();
           document.add(new Paragraph("                                                       RELAT√ìRIO DE VENDAS AO CLIENTE"));
           document.add(new Paragraph(""
                   + ""
                   + ""));

           document.add(new Paragraph("                               DADOS ESTABELECIMENTO"));
           document.add(new Paragraph("Sistemas de Vendas ao Consumidor LTDA\n" +
            "CNPJ: 04.995.470/0001-92   Fantasia: SVC\n" +
            "Avenida Sert√≥rio, 5200       Bairro: Sarandi\n" +
            "Porto Alegre ‚Äì RS"));
           document.add(new Paragraph("  "
                   + ""
                   + ""));
           if(cmdClienteVendas.isSelected()){
               document.add(new Paragraph("                                    DADOS CLIENTE"));
           document.add(new Paragraph("Nome: " + txtNomeVendas.getText() + "   Cpf: " + txtCpfVendas.getText()));
           document.add(new Paragraph("Endere√ßo:" +txtEnderecoVendas.getText()+ "    Numero: "+txtNumeroVendas.getText()));
           document.add(new Paragraph("Bairro: " +txtBairroVendas.getText()+ "   Cidade: " +txtCidadeVendas.getText()+ "   Estado: " +txtEstadoVendas.getText()));
           document.add(new Paragraph("Telefone: " +txtTelefoneVendas.getText()));
           document.add(new Paragraph("  "
                   + ""
                   + ""));
           }

           document.add(new Paragraph("                                    ITENS DA NOTA"));
           
           DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel(); 
           int cont = TabelaVendas.getRowCount();

           for(int x=0 ; x<cont ;x++){
               String nota = TabelaVendas.getValueAt(x, 0).toString();
               String codigo = TabelaVendas.getValueAt(x, 1).toString();
               String descricao = TabelaVendas.getValueAt(x, 2).toString();
               String qtd = TabelaVendas.getValueAt(x, 3).toString();
               String valor = TabelaVendas.getValueAt(x, 4).toString();
               String data = TabelaVendas.getValueAt(x, 5).toString();
               document.add(new Paragraph("Nota - "+nota+ "   C√≥digo - "+codigo+"    Descri√ß√£o - "+descricao+"    Quantidade - "+qtd+"    Valor - "+valor+"    Data - "+data));
           }
           document.add(new Paragraph("  "
                   + ""
                   + ""));
           document.add(new Paragraph("                                    TOTAL DA NOTA"));
           document.add(new Paragraph("                Total Nota: " +txtTotalVendas.getText()+"    Quatidade: " +txtQuantidadeVendas.getText()));
        } catch (FileNotFoundException | DocumentException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }finally{
            document.close();
        }
        
        try {
            Desktop.getDesktop().open(new File("Vendas.pdf"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        
    }//GEN-LAST:event_btnPdfVendasActionPerformed

    private void btnPdfComprasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfComprasActionPerformed
        Document document =new Document();
        
        try {
            PdfWriter.getInstance(document, new FileOutputStream("Compras.pdf"));
            
            
           document.open();
           document.add(new Paragraph("                                                       RELAT√ìRIO DE COMPRAS POR FORNECEDOR"));
           document.add(new Paragraph(""
                   + ""
                   + ""));

           document.add(new Paragraph("                               DADOS ESTABELECIMENTO"));
           document.add(new Paragraph("Sistemas de Vendas ao Consumidor LTDA\n" +
            "CNPJ: 04.995.470/0001-92   Fantasia: SVC\n" +
            "Avenida Sert√≥rio, 5200       Bairro: Sarandi\n" +
            "Porto Alegre ‚Äì RS"));
           document.add(new Paragraph("  "
                   + ""
                   + ""));
          document.add(new Paragraph("                                    DADOS FORNECEDOR"));
           DefaultTableModel val1 = (DefaultTableModel) TabelaFornecedorCompras.getModel(); 
           int cont2 = TabelaFornecedorCompras.getRowCount();
           for(int x = 0; x<cont2 ; x++){
               String codigo = TabelaFornecedorCompras.getValueAt(x, 0).toString();
               String nome = TabelaFornecedorCompras.getValueAt(x, 1).toString();
               String endereco = TabelaFornecedorCompras.getValueAt(x, 2).toString();
               String numero = TabelaFornecedorCompras.getValueAt(x, 3).toString();
               String cnpj = TabelaFornecedorCompras.getValueAt(x, 4).toString();
               String telefone = TabelaFornecedorCompras.getValueAt(x, 5).toString();
           document.add(new Paragraph(""
                   + ""));
           document.add(new Paragraph("C√≥digo: " +codigo+ "    Nome: " + nome + "   CNPJ: " +cnpj));
           document.add(new Paragraph("Endere√ßo:" +endereco+ "    Numero: "+numero));
           document.add(new Paragraph("Telefone: " +telefone));
           }
           document.add(new Paragraph("  "
                   + ""
                   + ""));
           

           document.add(new Paragraph("                                    INFORMA√á√ïES DA NOTA"));
           
           DefaultTableModel val = (DefaultTableModel) TabelaNotaCompras.getModel(); 
           int cont = TabelaNotaCompras.getRowCount();

           for(int x=0 ; x<cont ;x++){
               String nota = TabelaNotaCompras.getValueAt(x, 0).toString();
               String fornecedor = TabelaNotaCompras.getValueAt(x, 1).toString();
               String data = TabelaNotaCompras.getValueAt(x, 2).toString();
               String valor = TabelaNotaCompras.getValueAt(x, 3).toString();
               String desconto = TabelaNotaCompras.getValueAt(x, 4).toString();
               document.add(new Paragraph("Nota - "+nota+ "   Fornecedor - "+fornecedor+"    Data - "+data+"    Valor - "+valor+"    Desconto - "+desconto));
                       document.add(new Paragraph(""
                   + ""));   
           }
                      document.add(new Paragraph("  "
                   + ""
                   + ""));
           
           document.add(new Paragraph("                                    INFORMA√á√ïES DOS ITENS"));
           
           DefaultTableModel val2 = (DefaultTableModel) TabelaItemCompras.getModel(); 
           int cont1 = TabelaItemCompras.getRowCount();

           for(int x=0 ; x<cont1 ;x++){
               String nota = TabelaItemCompras.getValueAt(x, 0).toString();
               String cod = TabelaItemCompras.getValueAt(x, 1).toString();
               String desc = TabelaItemCompras.getValueAt(x, 2).toString();
               String qtd = TabelaItemCompras.getValueAt(x, 3).toString();
               document.add(new Paragraph("Nota - "+nota+ "   C√≥digo - "+cod+"    Descri√ß√£o - "+desc+"    Quantidade - "+qtd));
                      document.add(new Paragraph(""
                   + ""));
           }
           document.add(new Paragraph("  "
                   + ""
                   + ""));
           document.add(new Paragraph("                                    TOTAL DA NOTA"));
           document.add(new Paragraph("                Total Nota: " +txtTotalCompras.getText()+"    Quatidade: " +txtQuantidadeCompras.getText()));
        } catch (FileNotFoundException | DocumentException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }finally{
            document.close();
        }
        
        try {
            Desktop.getDesktop().open(new File("Compras.pdf"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnPdfComprasActionPerformed

    private void btnPdfEstoqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfEstoqueActionPerformed
         Document document =new Document();
        
        try {
            PdfWriter.getInstance(document, new FileOutputStream("Estoque.pdf"));
            
            
           document.open();
           document.add(new Paragraph("                                                       RELAT√ìRIO DE ESTOQUE POR PRODUTO"));
           document.add(new Paragraph(""
                   + ""
                   + ""));

           document.add(new Paragraph("                               DADOS ESTABELECIMENTO"));
           document.add(new Paragraph("Sistemas de Vendas ao Consumidor LTDA\n" +
            "CNPJ: 04.995.470/0001-92   Fantasia: SVC\n" +
            "Avenida Sert√≥rio, 5200       Bairro: Sarandi\n" +
            "Porto Alegre ‚Äì RS"));
           document.add(new Paragraph("  "
                   + ""
                   + ""));
         
         

           document.add(new Paragraph("                                    PRODUTOS"));
           
           DefaultTableModel val = (DefaultTableModel) TabelaEstoque.getModel(); 
           int cont = TabelaEstoque.getRowCount();

           for(int x=0 ; x<cont ;x++){
               String codigo = TabelaEstoque.getValueAt(x, 0).toString();
               String descricao = TabelaEstoque.getValueAt(x, 1).toString();
               String estoque = TabelaEstoque.getValueAt(x, 2).toString();
               document.add(new Paragraph("C√≥digo - "+codigo+ "   Descri√ß√£o - "+descricao+"    estoque - "+estoque));
           }
           document.add(new Paragraph("  "
                   + ""
                   + ""));
        } catch (FileNotFoundException | DocumentException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }finally{
            document.close();
        }
        
        try {
            Desktop.getDesktop().open(new File("Estoque.pdf"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnPdfEstoqueActionPerformed

    private void cmdDocumentoReceitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdDocumentoReceitasMouseClicked
        if(cmdDocumentoReceitas.isSelected()){
            txtDocumentoReceitas.setEnabled(true);
            cmdDocumentoReceitas.setForeground(Color.blue);
            cmdGeralReceitas.setSelected(false);
            cmdGeralReceitas.setForeground(Color.black);
            txtDocumentoReceitas.requestFocus();
        }else{
            cmdDocumentoReceitas.setForeground(Color.black);
            txtDocumentoReceitas.setEnabled(false);
        }            
    }//GEN-LAST:event_cmdDocumentoReceitasMouseClicked

    private void cmdDocumentoReceitasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdDocumentoReceitasKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdDocumentoReceitasKeyPressed

    private void cmdGeralReceitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdGeralReceitasMouseClicked
        if(cmdGeralReceitas.isSelected()){
            txtDocumentoReceitas.setEnabled(false);
            cmdGeralReceitas.setForeground(Color.blue);
            cmdDocumentoReceitas.setSelected(false);
            cmdDocumentoReceitas.setForeground(Color.black);
        }else{
            cmdGeralReceitas.setForeground(Color.black);
        }          
    }//GEN-LAST:event_cmdGeralReceitasMouseClicked

    private void cmdGeralReceitasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmdGeralReceitasKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmdGeralReceitasKeyPressed

    private void cmdDataReceitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdDataReceitasMouseClicked
        if(cmdDataReceitas.isSelected()){
            txtDataInicialReceitas.setEnabled(true);
            txtDataFinalReceitas.setEnabled(false);
            cmdDataReceitas.setForeground(Color.blue);
            cmdPeriodoReceitas.setSelected(false);
            cmdPeriodoReceitas.setForeground(Color.black);
        }else{
            cmdDataReceitas.setForeground(Color.black);
            txtDataInicialReceitas.setEnabled(false);
            txtDataFinalReceitas.setEnabled(false);
        }          
    }//GEN-LAST:event_cmdDataReceitasMouseClicked

    private void txtDataInicialReceitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDataInicialReceitasMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataInicialReceitasMouseClicked

    private void txtDataInicialReceitasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataInicialReceitasKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            txtDataFinalReceitas.requestFocus();
        }
    }//GEN-LAST:event_txtDataInicialReceitasKeyPressed

    private void cmdPeriodoReceitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdPeriodoReceitasMouseClicked
         if(cmdPeriodoReceitas.isSelected()){
            txtDataInicialReceitas.setEnabled(true);
            txtDataFinalReceitas.setEnabled(true);
            cmdPeriodoReceitas.setForeground(Color.blue);
            cmdDataReceitas.setSelected(false);
            cmdDataReceitas.setForeground(Color.black);
        }else{
            cmdPeriodoReceitas.setForeground(Color.black);
            txtDataInicialReceitas.setEnabled(false);
            txtDataFinalReceitas.setEnabled(false);
        }          
    }//GEN-LAST:event_cmdPeriodoReceitasMouseClicked

    private void btnBuscarReceitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarReceitasActionPerformed
        if(cmdDocumentoReceitas.isSelected()){
            BuscaPorDocumentosReceitas();
        }else if(cmdGeralReceitas.isSelected()){
            BuscaGeralReceitas();
        } else JOptionPane.showMessageDialog(null, "informe uma op√ß√£o para Proseguir!");
        
        double count=0;
            for (int i=0; i<=TabelaReceitas.getRowCount()-1;i++) {
                count+=Double.parseDouble(TabelaReceitas.getValueAt(i, 2).toString());
            }
            String TotalGeral = "" + count; 
            txtTotalReceitas.setText(TotalGeral);
    }//GEN-LAST:event_btnBuscarReceitasActionPerformed

    private void btnCancelarReceitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarReceitasActionPerformed
        cancelarReceitas();
    }//GEN-LAST:event_btnCancelarReceitasActionPerformed

    private void txtDocumentoReceitasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoReceitasKeyPressed
        if(evt.getKeyCode() == 113){
            new formPesquisaReceita().setVisible(true);
        }else if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            btnBuscarReceitas.requestFocus();
        }
    }//GEN-LAST:event_txtDocumentoReceitasKeyPressed

    private void btnPdfReceitasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfReceitasActionPerformed
        Document document =new Document();
        
        try {
            PdfWriter.getInstance(document, new FileOutputStream("Receitas.pdf"));
            
           document.open();
           document.add(new Paragraph("                                                       RELAT√ìRIO DE RECEITAS"));
           document.add(new Paragraph(""
                   + ""
                   + ""));

           document.add(new Paragraph("                               DADOS ESTABELECIMENTO"));
           document.add(new Paragraph("Sistemas de Vendas ao Consumidor LTDA\n" +
            "CNPJ: 04.995.470/0001-92   Fantasia: SVC\n" +
            "Avenida Sert√≥rio, 5200       Bairro: Sarandi\n" +
            "Porto Alegre ‚Äì RS"));
           document.add(new Paragraph("  "
                   + ""
                   + ""));
         
         

           document.add(new Paragraph("                                    RECEITAS"));
           
           DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel(); 
           int cont = TabelaReceitas.getRowCount();

           for(int x=0 ; x<cont ;x++){
               String Documento = TabelaReceitas.getValueAt(x, 0).toString();
               String descricao = TabelaReceitas.getValueAt(x, 1).toString();
               String Total = TabelaReceitas.getValueAt(x, 2).toString();
               document.add(new Paragraph("Documento - "+Documento+ "   Descri√ß√£o - "+descricao+"    Total - "+Total));
           }
           document.add(new Paragraph("  "
                   + ""
                   + ""));
           document.add(new Paragraph("                                    TOTAL DAS RECEITAS"));
           document.add(new Paragraph("                Total: " +txtTotalReceitas.getText()));
        } catch (FileNotFoundException | DocumentException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }finally{
            document.close();
        }
        
        try {
            Desktop.getDesktop().open(new File("Receitas.pdf"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_btnPdfReceitasActionPerformed
   
    public void cancelarReceitas(){
        txtDataInicialReceitas.setText("");
        txtDataFinalReceitas.setText("");
        txtDocumentoReceitas.setText("");
        txtDocumentoReceitas.setEnabled(false);
        txtDataInicialReceitas.setEnabled(false);
        txtDataFinalReceitas.setEnabled(false);
        DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
        int codigo = TabelaReceitas.getRowCount();
        for(int x=codigo-1 ; x>=0 ; x--){
            val.removeRow(x);
        }
        cmdGeralReceitas.setSelected(false);
        cmdDocumentoReceitas.setSelected(false);
        cmdDataReceitas.setSelected(false);
        cmdPeriodoReceitas.setSelected(false);
        cmdGeralReceitas.setForeground(Color.BLACK);
        cmdDocumentoReceitas.setForeground(Color.BLACK);
        cmdDataReceitas.setForeground(Color.BLACK);
        cmdPeriodoReceitas.setForeground(Color.BLACK);
    }
    
    public void BuscaPorDocumentosReceitas(){
        int num = 0;
        try {
            this.con = database.getConnection();
            
            PreparedStatement buscaDoc = con.prepareStatement("select * from docrec where docdoc = '"+txtDocumentoReceitas.getText()+"'");
            
            ResultSet rs = buscaDoc.executeQuery();
            
            while(rs.next()){
                 String Documento = rs.getString("docdoc");
                 String Nome = rs.getString("docdes");
                 try {
                   this.con = database.getConnection();

                   Grupo_Produto PRO = new Grupo_Produto();

                   String PROCodigo = PRO.descricao;

                   if(cmdDataReceitas.isSelected()){
                       PreparedStatement posted = con.prepareStatement("select sum(nfevlrtot) from ctenfe,docrec where nferec = docdoc and nfeope = '065' and nferec = '"+Documento+"' and nfedat = '"+txtDataInicialReceitas.getText()+"'");

                   ResultSet rs1 = posted.executeQuery();

                   rs1.next();
                 String Total = rs1.getString("sum");
            
                 DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
                 if(Total == null){
                          Total = "0";
                      }
                 val.addRow(new String[]{Documento,Nome,Total}); 
                   }else if(cmdPeriodoReceitas.isSelected()){
                       PreparedStatement posted = con.prepareStatement("select sum(nfevlrtot) from ctenfe,docrec where nferec = docdoc and nfeope = '065' and nferec = '"+Documento+"' and nfedat between '"+txtDataInicialReceitas.getText()+"' and '"+txtDataFinalReceitas.getText()+"'");

                   ResultSet rs1 = posted.executeQuery();

                   rs1.next();
                 String Total = rs1.getString("sum");
            
                 DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
                 if(Total == null){
                          Total = "0";
                      }
                 val.addRow(new String[]{Documento,Nome,Total}); 
                   }else{
                      PreparedStatement posted = con.prepareStatement("select sum(nfevlrtot) from ctenfe,docrec where nferec = docdoc and nfeope = '065' and nferec = '"+Documento+"'");

                   ResultSet rs1 = posted.executeQuery();

                   rs1.next();
                 String Total = rs1.getString("sum");
            
                 DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
                 if(Total == null){
                          Total = "0";
                      }
                 val.addRow(new String[]{Documento,Nome,Total}); 
                   }
                   

               } catch (Exception ex) {
                   Logger.getLogger(formCadastraProduto.class.getName()).log(Level.SEVERE, null, ex);
               }
               num = 1;
            } 
            if (num == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADO DADOS PARA PAR√ÇMETROS INFORMADOS!");
        } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }
    
    public void BuscaGeralReceitas(){
        int num = 0;
        try {
            this.con = database.getConnection();
            
            PreparedStatement buscaDoc = con.prepareStatement("select * from docrec");
            
            ResultSet rs = buscaDoc.executeQuery();
            
            while(rs.next()){
                 String Documento = rs.getString("docdoc");
                 String Nome = rs.getString("docdes");
                 try {
                   this.con = database.getConnection();

                   Grupo_Produto PRO = new Grupo_Produto();

                   String PROCodigo = PRO.descricao;

                   if(cmdDataReceitas.isSelected()){
                       PreparedStatement posted = con.prepareStatement("select sum(nfevlrtot) from ctenfe,docrec where nferec = docdoc and nfeope = '065' and nferec = '"+Documento+"' and nfedat = '"+txtDataInicialReceitas.getText()+"'");

                       ResultSet rs1 = posted.executeQuery();

                       rs1.next();
                       String Total = rs1.getString("sum");
            
                 DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
                 if(Total == null){
                          Total = "0";
                      }
                 val.addRow(new String[]{Documento,Nome,Total});
                   }else if(cmdPeriodoReceitas.isSelected()){
                        PreparedStatement posted = con.prepareStatement("select sum(nfevlrtot) from ctenfe,docrec where nferec = docdoc and nfeope = '065' and nferec = '"+Documento+"' and nfedat between '"+txtDataInicialReceitas.getText()+"' and '"+txtDataFinalReceitas.getText()+"'");

                        ResultSet rs1 = posted.executeQuery();

                        rs1.next();
                      String Total = rs1.getString("sum");

                      DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
                      if(Total == null){
                          Total = "0";
                      }  
                      val.addRow(new String[]{Documento,Nome,Total});
                   }else{
                       PreparedStatement posted = con.prepareStatement("select sum(nfevlrtot) from ctenfe,docrec where nferec = docdoc and nfeope = '065' and nferec = '"+Documento+"'");

                        ResultSet rs1 = posted.executeQuery();

                        rs1.next();
                      String Total = rs1.getString("sum");

                      DefaultTableModel val = (DefaultTableModel) TabelaReceitas.getModel();
                      if(Total == null){
                          Total = "0";
                      }
                      val.addRow(new String[]{Documento,Nome,Total});
                      
                   }
               } catch (Exception ex) {
                   Logger.getLogger(formCadastraProduto.class.getName()).log(Level.SEVERE, null, ex);
               }
               num = 1;
            }
            if (num == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADO DADOS PARA PAR√ÇMETROS INFORMADOS!");
        } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
                
    }
    
    public void BuscarEstoque(){
         if(cmdTotalEstoque.isSelected()){
             try {
            this.con = database.getConnection();
            Produto PRO = new Produto();
                PreparedStatement posted = con.prepareStatement("select * from cpro order by pro_cod");

                ResultSet rs = posted.executeQuery();

                while(rs.next()){
                   
                   String Codigo = rs.getString("pro_cod");
                   String Descricao = rs.getString("pro_des");
                   Estoque = rs.getString("pro_estoque");
                   int estoque = Integer.parseInt(Estoque);

                //   if(estoque < 0){
               //       TabelaEstoque.getColumnModel().getColumn(2).setCellRenderer(renderer);
              //     }

                   DefaultTableModel val = (DefaultTableModel) TabelaEstoque.getModel(); 
                   val.addRow(new String[]{Codigo,Descricao,Estoque}); 
                   
                }

            } catch (Exception ex) {
                Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }else if(cmdProdutoEstoque.isSelected()){
            try {
            this.con = database.getConnection();
            if(txtCodigoProdutoEstoque.getText().length()<=0){
                JOptionPane.showMessageDialog(null, "SELECIONE UMA PRODUTO PARA CONSULTAR!");
            } else{
                PreparedStatement posted = con.prepareStatement("select * from cpro where pro_cod = '"+txtCodigoProdutoEstoque.getText()+"' order by pro_cod");

                ResultSet rs = posted.executeQuery();

                while(rs.next()){
                   String Codigo = rs.getString("pro_cod");
                   String Descricao = rs.getString("pro_des");
                   String Estoque = rs.getString("pro_estoque");

                   DefaultTableModel val = (DefaultTableModel) TabelaEstoque.getModel();

                   val.addRow(new String[]{Codigo,Descricao,Estoque}); 
                }

            }
            } catch (Exception ex) {
                Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(cmdPeriodoEstoque.isSelected()){
            try {
            this.con = database.getConnection();
            if(txtCodigoProdutoEstoque.getText().length()<=0){
                JOptionPane.showMessageDialog(null, "SELECIONE UMA PRODUTO PARA CONSULTAR!");
            } else{
                if(txtCodigoProdutoEstoqueFinal.getText().length()<=0){
                    JOptionPane.showMessageDialog(null, "SELECIONE UMA PRODUTO FINAL PARA CONSULTAR!");
                } else{
                    PreparedStatement posted = con.prepareStatement("select * from cpro where pro_cod between  '"+txtCodigoProdutoEstoque.getText()+"' and '"+txtCodigoProdutoEstoqueFinal.getText()+"' order by pro_cod");

                    ResultSet rs = posted.executeQuery();

                    while(rs.next()){
                       String Codigo = rs.getString("pro_cod");
                       String Descricao = rs.getString("pro_des");
                       String Estoque = rs.getString("pro_estoque");

                       DefaultTableModel val = (DefaultTableModel) TabelaEstoque.getModel();

                       val.addRow(new String[]{Codigo,Descricao,Estoque}); 
                    }
                }
            }
            } catch (Exception ex) {
                Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }
    DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); 

        int estoque = Integer.parseInt(Estoque);
        if (estoque <0 ) {
            c.setForeground(Color.red);
            super.setValue(value);
        } else {
            c.setForeground(Color.black);
            super.setValue(value);
        }
        return c;
    }
};
    
    public void buscageral(){
        try {
            this.con = database.getConnection();
        PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                }
                            
                            DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
    if(TabelaVendas.getRowCount() == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADA NOTAS PARA PARAMETROS INFORMADOS");
                            } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void ConsultaClienteSemProduto(){
        int num=0;
        String CodCLi = txtCliente.getText();
        String Pro = txtProduto.getText();
        Cliente CLI = new Cliente();
        String NUMEROCLIENTE = txtCliente.getText();
         try {
            this.con = database.getConnection();
        
                    if(cmdDataVendas.isSelected()){
                        if(txtDataInicialVendas.getText().length()<=0){
                             JOptionPane.showMessageDialog(null, "FAVOR INFORMAR A DATA PARA PROSEGUIR");  
                        }else{
                             PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and nfecodcli = '"+txtCliente.getText()+"' and nfedat = '"+txtDataInicialVendas.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                    }
                                num=1;
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                        }
                    }else if(cmdPeriodoVendas.isSelected()){
                        if(txtDataFinalVendas.getText().length()<=0){
                            JOptionPane.showMessageDialog(null, "FAVOR INFORMAR A DATA PARA PROSEGUIR");
                        }else {
                             PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and nfecodcli = '"+txtCliente.getText()+"' and nfedat between '"+txtDataInicialVendas.getText()+"' and '"+txtDataFinalVendas.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                    }
                                num=1;
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                        }
                    }else{

                            if(txtProduto.getText().length()<=0){
                            PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and nfecodcli = '"+txtCliente.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                    }
                                num=1;
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                            } else if(0<txtProduto.getText().length()){
                                PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and nfecodcli = '"+txtCliente.getText()+"' order by nfenum");
                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli});
                                        }
                                num=1;
                                    }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                                }
                            }
                    if(num == 1){
                        PreparedStatement buscacliente = con.prepareStatement("select * from ccli");

                    ResultSet rs = buscacliente.executeQuery();

                    while(rs.next()){
                        String cod = rs.getString("cli_cod");
                        if(cod.trim().equals(CodCLi)){
                            CLI.nome = rs.getString("cli_nome");
                            CLI.bairro = rs.getString("CLI_bairro");
                            CLI.cidade = rs.getString("CLI_cidade");
                            CLI.cpf = rs.getString("cli_cpf");
                            CLI.estado = rs.getString("CLI_estado");
                            CLI.endereco = rs.getString("cli_endereco");
                            CLI.numero = rs.getString("CLI_numero");
                            CLI.telefone = rs.getString("CLI_telefone1");

                            txtNomeVendas.setText( CLI.nome);
                            txtBairroVendas.setText(CLI.bairro);
                            txtCidadeVendas.setText(CLI.cidade);
                            txtCpfVendas.setText(CLI.cpf);
                            txtEstadoVendas.setText(CLI.estado);
                            txtEnderecoVendas.setText(CLI.endereco);
                            txtNumeroVendas.setText(CLI.numero);
                            txtTelefoneVendas.setText(CLI.telefone);
                            }
                        }
                    } else JOptionPane.showMessageDialog(null, "NOTA N√ÉO ENCONTRADA PARA PARAMETROS INFORMADOS!");
        } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void ConsultaClienteComProduto(){
        int num=0;
        String CodCLi = txtCliente.getText();
        String Pro = txtProduto.getText();
        Cliente CLI = new Cliente();
        String NUMEROCLIENTE = txtCliente.getText();
         try {
            this.con = database.getConnection();
        
                    if(cmdDataVendas.isSelected()){
                        if(txtDataInicialVendas.getText().length()<=0){
                             JOptionPane.showMessageDialog(null, "FAVOR INFORMAR A DATA PARA PROSEGUIR");  
                        }else{
                             PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and nfecodcli = '"+txtCliente.getText()+"' and nfedat = '"+txtDataInicialVendas.getText()+"' and itmcodpro = '"+txtProduto.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli});
                                    }
                                num=1;
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                        }
                    }else if(cmdPeriodoVendas.isSelected()){
                        if(txtDataFinalVendas.getText().length()<=0){
                            JOptionPane.showMessageDialog(null, "FAVOR INFORMAR A DATA PARA PROSEGUIR");
                        }else {
                             PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and nfecodcli = '"+txtCliente.getText()+"' and nfedat between '"+txtDataInicialVendas.getText()+"' and '"+txtDataFinalVendas.getText()+"' and itmcodpro = '"+txtProduto.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                    }
                                num=1;
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                        }
                    }else{

                            if(txtProduto.getText().length()>=0){
                            PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and itmcodpro = '"+txtProduto.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli});
                                    }
                                num=1;
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                            } else if(0<txtProduto.getText().length()){
                                PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and itmcodpro = '"+txtProduto.getText()+"' order by nfenum");
                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("nfecodcli");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli});
                                        }
                                num=1;
                                    }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                                }
                            }
                    if(num==1){
                        PreparedStatement buscacliente = con.prepareStatement("select * from ccli");

                    ResultSet rs = buscacliente.executeQuery();

                    while(rs.next()){
                        String cod = rs.getString("cli_cod");
                        if(cod.trim().equals(CodCLi)){
                            CLI.nome = rs.getString("cli_nome");
                            CLI.bairro = rs.getString("CLI_bairro");
                            CLI.cidade = rs.getString("CLI_cidade");
                            CLI.cpf = rs.getString("cli_cpf");
                            CLI.estado = rs.getString("CLI_estado");
                            CLI.endereco = rs.getString("cli_endereco");
                            CLI.numero = rs.getString("CLI_numero");
                            CLI.telefone = rs.getString("CLI_telefone1");

                            txtNomeVendas.setText( CLI.nome);
                            txtBairroVendas.setText(CLI.bairro);
                            txtCidadeVendas.setText(CLI.cidade);
                            txtCpfVendas.setText(CLI.cpf);
                            txtEstadoVendas.setText(CLI.estado);
                            txtEnderecoVendas.setText(CLI.endereco);
                            txtNumeroVendas.setText(CLI.numero);
                            txtTelefoneVendas.setText(CLI.telefone);
                            }
                        }
                    }else JOptionPane.showMessageDialog(null, "NOTA N√ÉO ENCONTRADA PARA PARAMETROS INFORMADOS!");
        } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    public void ConsultaProduto(){
        
        String CodCLi = txtProduto.getText();
        String NUMEROCLIENTE = txtProduto.getText();
         try {
            this.con = database.getConnection();
                    if(cmdDataVendas.isSelected()){
                        if(txtDataInicialVendas.getText().length()<=0){
                             JOptionPane.showMessageDialog(null, "FAVOR INFORMAR A DATA PARA PROSEGUIR");  
                        }else{
                            PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and itmcodpro = '"+txtProduto.getText()+"' and nfedat = '"+txtDataInicialVendas.getText()+"'order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("itmcodpro");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli});
                                    }
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                        }
                    }else if(cmdPeriodoVendas.isSelected()){
                        if(txtDataFinalVendas.getText().length()<=0){
                            JOptionPane.showMessageDialog(null, "FAVOR INFORMAR A DATA PARA PROSEGUIR");
                        }else {
                             PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and itmcodpro = '"+txtProduto.getText()+"' and nfedat between '"+txtDataInicialVendas.getText()+"' and '"+txtDataFinalVendas.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("itmcodpro");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli});; 
                                    }
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                        }
                    }else{

                            if(txtProduto.getText().length()<=0){
                            PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and itmcodpro = '"+txtProduto.getText()+"' order by nfenum");

                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("itmcodpro");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                    }
                                }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                            } else if(0<txtProduto.getText().length()){
                                PreparedStatement buscanota = con.prepareStatement("select ctenfe.nfecodcli,ctenfe.nfenum,ctenfe.nfedat,cteitm.itmdespro,cteitm.itmcodpro,cteitm.itmqtd,cteitm.itmvlrtot from ctenfe,cteitm where ctenfe.nfenum = cteitm.itmnum and nfeope = '065' and nfesit = '0' and nfenum > 0 and itmcodpro = '"+txtProduto.getText()+"' order by nfenum");
                            ResultSet rs1 = buscanota.executeQuery();
                            while(rs1.next()){
                                String numero = rs1.getString("itmcodpro");
                                if(numero.trim().equals(NUMEROCLIENTE)){
                                    Produto PRO = new Produto();
                                    PRO.codigo = rs1.getString("ITMCODPRO");
                                    PRO.descricao = rs1.getString("itmdespro");
                                    String data = rs1.getString("nfedat");
                                    String numeronota = rs1.getString("NFENUM");
                                    String CodCli = rs1.getString("NFECODCLI");
                                    String Qtd = rs1.getString("itmqtd");
                                    String ValorTotal = rs1.getString("itmvlrtot");

                                    DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();

                                    val.addRow(new String[]{numeronota, PRO.codigo,PRO.descricao,Qtd,ValorTotal,data,CodCli}); 
                                        }
                                    }
                             DefaultTableModel val = (DefaultTableModel) TabelaVendas.getModel();
                            double count=0;
                            int Date=0;
                                for (int i=0; i<=TabelaVendas.getRowCount()-1;i++) {
                                    count+=Double.parseDouble(TabelaVendas.getValueAt(i, 4).toString());
                                    Date+=Integer.parseInt(TabelaVendas.getValueAt(i, 3).toString());
                                }
                                
                                String ValorTotal = "" + count; 
                                String data = "" + Date;
                                txtTotalVendas.setText(ValorTotal);
                                txtQuantidadeVendas.setText(data);
                                }
                            }
                    if(TabelaVendas.getRowCount() == 0) JOptionPane.showMessageDialog(null, "N√ÉO FOI ENCONTRADA NOTAS PARA PARAMETROS INFORMADOS");
        } catch (Exception ex) {
            Logger.getLogger(formRelatorio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
        
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formRelatorio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formRelatorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaEstoque;
    private javax.swing.JTable TabelaFornecedorCompras;
    private javax.swing.JTable TabelaItemCompras;
    private javax.swing.JTable TabelaNotaCompras;
    private javax.swing.JTable TabelaReceitas;
    private javax.swing.JTable TabelaVendas;
    private javax.swing.JButton btnBuscarCompras;
    private javax.swing.JButton btnBuscarEstoque;
    private javax.swing.JButton btnBuscarReceitas;
    private javax.swing.JButton btnBuscarVendas;
    private javax.swing.JButton btnCancelarCompras;
    private javax.swing.JButton btnCancelarEstoque;
    private javax.swing.JButton btnCancelarReceitas;
    private javax.swing.JButton btnCancelarVendas;
    private javax.swing.JButton btnPdfCompras;
    private javax.swing.JButton btnPdfEstoque;
    private javax.swing.JButton btnPdfReceitas;
    private javax.swing.JButton btnPdfVendas;
    private javax.swing.JRadioButton cmdClienteVendas;
    private javax.swing.JRadioButton cmdComprasNoPeriodoCompras;
    private javax.swing.JRadioButton cmdComprasPorDataCompras;
    private javax.swing.JRadioButton cmdComprasPorProdutoCompras;
    private javax.swing.JRadioButton cmdDataReceitas;
    private javax.swing.JRadioButton cmdDataVendas;
    private javax.swing.JRadioButton cmdDocumentoReceitas;
    private javax.swing.JRadioButton cmdGeralReceitas;
    private javax.swing.JRadioButton cmdNotaCompras;
    private javax.swing.JRadioButton cmdPeriodoEstoque;
    private javax.swing.JRadioButton cmdPeriodoReceitas;
    private javax.swing.JRadioButton cmdPeriodoVendas;
    private javax.swing.JRadioButton cmdProdutoEstoque;
    private javax.swing.JRadioButton cmdProdutoVendas;
    private javax.swing.JRadioButton cmdTotalEstoque;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBairroVendas;
    private javax.swing.JTextField txtCidadeVendas;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtCodigoProdutoEstoque;
    private javax.swing.JTextField txtCodigoProdutoEstoqueFinal;
    private javax.swing.JFormattedTextField txtCpfVendas;
    private javax.swing.JFormattedTextField txtDataFinalCompras;
    private javax.swing.JFormattedTextField txtDataFinalReceitas;
    private javax.swing.JFormattedTextField txtDataFinalVendas;
    private javax.swing.JFormattedTextField txtDataInicialCompras;
    private javax.swing.JFormattedTextField txtDataInicialReceitas;
    private javax.swing.JFormattedTextField txtDataInicialVendas;
    private javax.swing.JTextField txtDocumentoReceitas;
    private javax.swing.JTextField txtEnderecoVendas;
    private javax.swing.JTextField txtEstadoVendas;
    private javax.swing.JTextField txtFornecedorCompras;
    private javax.swing.JTextField txtNomeVendas;
    private javax.swing.JTextField txtNotaCompras;
    private javax.swing.JTextField txtNumeroVendas;
    private javax.swing.JTextField txtProduto;
    private javax.swing.JTextField txtProdutoCompras;
    private javax.swing.JTextField txtQuantidadeCompras;
    private javax.swing.JTextField txtQuantidadeVendas;
    private javax.swing.JTextField txtTelefoneVendas;
    private javax.swing.JTextField txtTotalCompras;
    private javax.swing.JLabel txtTotalReceitas;
    private javax.swing.JTextField txtTotalVendas;
    // End of variables declaration//GEN-END:variables
}
